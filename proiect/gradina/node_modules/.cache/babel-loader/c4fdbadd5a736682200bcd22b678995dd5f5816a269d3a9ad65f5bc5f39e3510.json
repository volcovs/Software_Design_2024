{"ast":null,"code":"import { useRef } from 'react';\nfunction isEqual(a, b) {\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Identical to `useMemo` _except_ that it provides a semantic guarantee that\n * values will not be invalidated unless the dependencies change. This is unlike\n * the built in `useMemo` which may discard memoized values for performance reasons.\n *\n * @param factory A function that returns a value to be memoized\n * @param deps A dependency array\n */\nexport default function useStableMemo(factory, deps) {\n  let isValid = true;\n  const valueRef = useRef();\n  // initial hook call\n  if (!valueRef.current) {\n    valueRef.current = {\n      deps,\n      result: factory()\n    };\n    // subsequent calls\n  } else {\n    isValid = !!(deps && valueRef.current.deps && isEqual(deps, valueRef.current.deps));\n  }\n  const cache = isValid ? valueRef.current : {\n    deps,\n    result: factory()\n  };\n  // must update immediately so any sync renders here don't cause an infinite loop\n  valueRef.current = cache;\n  return cache.result;\n}","map":{"version":3,"names":["useRef","isEqual","a","b","length","i","useStableMemo","factory","deps","isValid","valueRef","current","result","cache"],"sources":["D:/Personal_Data/an III/sem_II/PS/proiect/gradina/node_modules/@restart/hooks/esm/useStableMemo.js"],"sourcesContent":["import { useRef } from 'react';\nfunction isEqual(a, b) {\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Identical to `useMemo` _except_ that it provides a semantic guarantee that\n * values will not be invalidated unless the dependencies change. This is unlike\n * the built in `useMemo` which may discard memoized values for performance reasons.\n *\n * @param factory A function that returns a value to be memoized\n * @param deps A dependency array\n */\nexport default function useStableMemo(factory, deps) {\n  let isValid = true;\n  const valueRef = useRef();\n  // initial hook call\n  if (!valueRef.current) {\n    valueRef.current = {\n      deps,\n      result: factory()\n    };\n    // subsequent calls\n  } else {\n    isValid = !!(deps && valueRef.current.deps && isEqual(deps, valueRef.current.deps));\n  }\n  const cache = isValid ? valueRef.current : {\n    deps,\n    result: factory()\n  };\n  // must update immediately so any sync renders here don't cause an infinite loop\n  valueRef.current = cache;\n  return cache.result;\n}"],"mappings":"AAAA,SAASA,MAAM,QAAQ,OAAO;AAC9B,SAASC,OAAOA,CAACC,CAAC,EAAEC,CAAC,EAAE;EACrB,IAAID,CAAC,CAACE,MAAM,KAAKD,CAAC,CAACC,MAAM,EAAE,OAAO,KAAK;EACvC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,CAAC,CAACE,MAAM,EAAEC,CAAC,EAAE,EAAE;IACjC,IAAIH,CAAC,CAACG,CAAC,CAAC,KAAKF,CAAC,CAACE,CAAC,CAAC,EAAE;MACjB,OAAO,KAAK;IACd;EACF;EACA,OAAO,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,aAAaA,CAACC,OAAO,EAAEC,IAAI,EAAE;EACnD,IAAIC,OAAO,GAAG,IAAI;EAClB,MAAMC,QAAQ,GAAGV,MAAM,CAAC,CAAC;EACzB;EACA,IAAI,CAACU,QAAQ,CAACC,OAAO,EAAE;IACrBD,QAAQ,CAACC,OAAO,GAAG;MACjBH,IAAI;MACJI,MAAM,EAAEL,OAAO,CAAC;IAClB,CAAC;IACD;EACF,CAAC,MAAM;IACLE,OAAO,GAAG,CAAC,EAAED,IAAI,IAAIE,QAAQ,CAACC,OAAO,CAACH,IAAI,IAAIP,OAAO,CAACO,IAAI,EAAEE,QAAQ,CAACC,OAAO,CAACH,IAAI,CAAC,CAAC;EACrF;EACA,MAAMK,KAAK,GAAGJ,OAAO,GAAGC,QAAQ,CAACC,OAAO,GAAG;IACzCH,IAAI;IACJI,MAAM,EAAEL,OAAO,CAAC;EAClB,CAAC;EACD;EACAG,QAAQ,CAACC,OAAO,GAAGE,KAAK;EACxB,OAAOA,KAAK,CAACD,MAAM;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}