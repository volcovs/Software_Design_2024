{"ast":null,"code":"import React, { Component } from 'react';\nimport axios from 'axios';\nimport '../style/UpdateNewPlant.css';\nimport PlantPresenter from \"../presenter/PlantPresenter\";\nclass UpdateNewPlant extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      plant: {\n        plantName: '',\n        species: '',\n        plantType: '',\n        carnivorous: '',\n        endangered: '',\n        location: '',\n        img: '' // Assuming imageData is a base64-encoded string for simplicity\n      },\n      lastLang: null,\n      dict: []\n    };\n    this.presenter = new PlantPresenter(this);\n  }\n  componentDidMount() {\n    const {\n      plantId\n    } = this.props;\n    if (plantId) {\n      // Fetch plant data for editing if plantId is provided\n      axios.get(`http://localhost:8080/plant/findById?id=${plantId}`).then(response => {\n        this.setState({\n          plant: response.data\n        });\n      }).catch(error => {\n        console.error('Error fetching plant data:', error);\n      });\n    }\n  }\n  render() {\n    return this.presenter.renderUpd();\n  }\n}\nexport default UpdateNewPlant;","map":{"version":3,"names":["React","Component","axios","PlantPresenter","UpdateNewPlant","constructor","props","state","plant","plantName","species","plantType","carnivorous","endangered","location","img","lastLang","dict","presenter","componentDidMount","plantId","get","then","response","setState","data","catch","error","console","render","renderUpd"],"sources":["D:/Personal_Data/an III/sem_II/PS/proiect/gradina/src/view/UpdateNewPlant.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport '../style/UpdateNewPlant.css';\r\nimport PlantPresenter from \"../presenter/PlantPresenter\";\r\n\r\nclass UpdateNewPlant extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            plant: {\r\n                plantName: '',\r\n                species: '',\r\n                plantType: '',\r\n                carnivorous: '',\r\n                endangered: '',\r\n                location: '',\r\n                img: '', // Assuming imageData is a base64-encoded string for simplicity\r\n            },\r\n            lastLang: null,\r\n            dict: []\r\n        };\r\n\r\n        this.presenter = new PlantPresenter(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { plantId } = this.props;\r\n        if (plantId) {\r\n            // Fetch plant data for editing if plantId is provided\r\n            axios.get(`http://localhost:8080/plant/findById?id=${plantId}`)\r\n                .then(response => {\r\n                    this.setState({ plant: response.data });\r\n                })\r\n                .catch(error => {\r\n                    console.error('Error fetching plant data:', error);\r\n                });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return this.presenter.renderUpd();\r\n    }\r\n}\r\n\r\nexport default UpdateNewPlant;\r\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,6BAA6B;AACpC,OAAOC,cAAc,MAAM,6BAA6B;AAExD,MAAMC,cAAc,SAASH,SAAS,CAAC;EACnCI,WAAWA,CAACC,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,KAAK,GAAG;MACTC,KAAK,EAAE;QACHC,SAAS,EAAE,EAAE;QACbC,OAAO,EAAE,EAAE;QACXC,SAAS,EAAE,EAAE;QACbC,WAAW,EAAE,EAAE;QACfC,UAAU,EAAE,EAAE;QACdC,QAAQ,EAAE,EAAE;QACZC,GAAG,EAAE,EAAE,CAAE;MACb,CAAC;MACDC,QAAQ,EAAE,IAAI;MACdC,IAAI,EAAE;IACV,CAAC;IAED,IAAI,CAACC,SAAS,GAAG,IAAIf,cAAc,CAAC,IAAI,CAAC;EAC7C;EAEAgB,iBAAiBA,CAAA,EAAG;IAChB,MAAM;MAAEC;IAAQ,CAAC,GAAG,IAAI,CAACd,KAAK;IAC9B,IAAIc,OAAO,EAAE;MACT;MACAlB,KAAK,CAACmB,GAAG,CAAE,2CAA0CD,OAAQ,EAAC,CAAC,CAC1DE,IAAI,CAACC,QAAQ,IAAI;QACd,IAAI,CAACC,QAAQ,CAAC;UAAEhB,KAAK,EAAEe,QAAQ,CAACE;QAAK,CAAC,CAAC;MAC3C,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;QACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACtD,CAAC,CAAC;IACV;EACJ;EAEAE,MAAMA,CAAA,EAAG;IACL,OAAO,IAAI,CAACX,SAAS,CAACY,SAAS,CAAC,CAAC;EACrC;AACJ;AAEA,eAAe1B,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}